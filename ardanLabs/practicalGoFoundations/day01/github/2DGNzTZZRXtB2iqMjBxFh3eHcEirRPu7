context.Context 
 
string 
 
string 
"context" 
"fmt" 
"net/http" 
"encoding/json" 
"log" 
"time" 
func(ctx context.Context, login string) (string, int, error) githubInfo returns name and number of public repos for login

func() 
struct{...} to help Json with hints we are creating our own type

func(slice []Type, elems ...Type) []Type 
 
 
func(v Type) int 
func(c chanu003c- Type) 
func(r float64, i float64) complex128 
 
 
func(dst []Type, src []Type) int 
func(m map[Type]Type1, key Type) 
 
 
 
 
func(c complex128) float64 
 
 
 
 
 
func(v Type) int 
func(t Type, size ...int) Type 
func(Type) *Type 
func(v any) 
func(args ...Type) 
func(args ...Type) 
func(c complex128) float64 
func() any 
 
 
 
 
 
 
 
 
 
func() context.Context Background returns a non-nil, empty Context. It is never canceled, has no
values, and has no deadline. It is typically used by the main function,
initialization, and tests, and as the top-level Context for incoming
requests.

func(cause error) A CancelCauseFunc behaves like a CancelFunc but additionally sets the cancellation cause.
This cause can be retrieved by calling Cause on the canceled Context or on
any of its derived Contexts.

If the context has already been canceled, CancelCauseFunc does not set the cause.
For example, if childContext is derived from parentContext:
  - if parentContext is canceled with cause1 before childContext is canceled with cause2,
    then Cause(parentContext) == Cause(childContext) == cause1
  - if childContext is canceled with cause2 before parentContext is canceled with cause1,
    then Cause(parentContext) == cause1 and Cause(childContext) == cause2

func() A CancelFunc tells an operation to abandon its work.
A CancelFunc does not wait for the work to stop.
A CancelFunc may be called by multiple goroutines simultaneously.
After the first call, subsequent calls to a CancelFunc do nothing.

 
